import "./chunk-EWTE5DHJ.js";

// node_modules/common-tags/es/TemplateTag/TemplateTag.js
var _createClass = /* @__PURE__ */ function() {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  return function(Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();
var _templateObject = _taggedTemplateLiteral(["", ""], ["", ""]);
function _taggedTemplateLiteral(strings, raw) {
  return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
var TemplateTag = function() {
  function TemplateTag2() {
    var _this = this;
    for (var _len = arguments.length, transformers = Array(_len), _key = 0; _key < _len; _key++) {
      transformers[_key] = arguments[_key];
    }
    _classCallCheck(this, TemplateTag2);
    this.tag = function(strings) {
      for (var _len2 = arguments.length, expressions = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        expressions[_key2 - 1] = arguments[_key2];
      }
      if (typeof strings === "function") {
        return _this.interimTag.bind(_this, strings);
      }
      if (typeof strings === "string") {
        return _this.transformEndResult(strings);
      }
      strings = strings.map(_this.transformString.bind(_this));
      return _this.transformEndResult(strings.reduce(_this.processSubstitutions.bind(_this, expressions)));
    };
    if (transformers.length > 0 && Array.isArray(transformers[0])) {
      transformers = transformers[0];
    }
    this.transformers = transformers.map(function(transformer) {
      return typeof transformer === "function" ? transformer() : transformer;
    });
    return this.tag;
  }
  _createClass(TemplateTag2, [{
    key: "interimTag",
    /**
     * An intermediary template tag that receives a template tag and passes the result of calling the template with the received
     * template tag to our own template tag.
     * @param  {Function}        nextTag          - the received template tag
     * @param  {Array<String>}   template         - the template to process
     * @param  {...*}            ...substitutions - `substitutions` is an array of all substitutions in the template
     * @return {*}                                - the final processed value
     */
    value: function interimTag(previousTag, template) {
      for (var _len3 = arguments.length, substitutions = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
        substitutions[_key3 - 2] = arguments[_key3];
      }
      return this.tag(_templateObject, previousTag.apply(void 0, [template].concat(substitutions)));
    }
    /**
     * Performs bulk processing on the tagged template, transforming each substitution and then
     * concatenating the resulting values into a string.
     * @param  {Array<*>} substitutions - an array of all remaining substitutions present in this template
     * @param  {String}   resultSoFar   - this iteration's result string so far
     * @param  {String}   remainingPart - the template chunk after the current substitution
     * @return {String}                 - the result of joining this iteration's processed substitution with the result
     */
  }, {
    key: "processSubstitutions",
    value: function processSubstitutions(substitutions, resultSoFar, remainingPart) {
      var substitution = this.transformSubstitution(substitutions.shift(), resultSoFar);
      return "".concat(resultSoFar, substitution, remainingPart);
    }
    /**
     * Iterate through each transformer, applying the transformer's `onString` method to the template
     * strings before all substitutions are processed.
     * @param {String}  str - The input string
     * @return {String}     - The final results of processing each transformer
     */
  }, {
    key: "transformString",
    value: function transformString(str) {
      var cb = function cb2(res, transform) {
        return transform.onString ? transform.onString(res) : res;
      };
      return this.transformers.reduce(cb, str);
    }
    /**
     * When a substitution is encountered, iterates through each transformer and applies the transformer's
     * `onSubstitution` method to the substitution.
     * @param  {*}      substitution - The current substitution
     * @param  {String} resultSoFar  - The result up to and excluding this substitution.
     * @return {*}                   - The final result of applying all substitution transformations.
     */
  }, {
    key: "transformSubstitution",
    value: function transformSubstitution(substitution, resultSoFar) {
      var cb = function cb2(res, transform) {
        return transform.onSubstitution ? transform.onSubstitution(res, resultSoFar) : res;
      };
      return this.transformers.reduce(cb, substitution);
    }
    /**
     * Iterates through each transformer, applying the transformer's `onEndResult` method to the
     * template literal after all substitutions have finished processing.
     * @param  {String} endResult - The processed template, just before it is returned from the tag
     * @return {String}           - The final results of processing each transformer
     */
  }, {
    key: "transformEndResult",
    value: function transformEndResult(endResult) {
      var cb = function cb2(res, transform) {
        return transform.onEndResult ? transform.onEndResult(res) : res;
      };
      return this.transformers.reduce(cb, endResult);
    }
  }]);
  return TemplateTag2;
}();
var TemplateTag_default = TemplateTag;

// node_modules/common-tags/es/trimResultTransformer/trimResultTransformer.js
var trimResultTransformer = function trimResultTransformer2() {
  var side = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  return {
    onEndResult: function onEndResult(endResult) {
      if (side === "") {
        return endResult.trim();
      }
      side = side.toLowerCase();
      if (side === "start" || side === "left") {
        return endResult.replace(/^\s*/, "");
      }
      if (side === "end" || side === "right") {
        return endResult.replace(/\s*$/, "");
      }
      throw new Error("Side not supported: " + side);
    }
  };
};
var trimResultTransformer_default = trimResultTransformer;

// node_modules/common-tags/es/stripIndentTransformer/stripIndentTransformer.js
function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  } else {
    return Array.from(arr);
  }
}
var stripIndentTransformer = function stripIndentTransformer2() {
  var type = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "initial";
  return {
    onEndResult: function onEndResult(endResult) {
      if (type === "initial") {
        var match = endResult.match(/^[^\S\n]*(?=\S)/gm);
        var indent = match && Math.min.apply(Math, _toConsumableArray(match.map(function(el) {
          return el.length;
        })));
        if (indent) {
          var regexp = new RegExp("^.{" + indent + "}", "gm");
          return endResult.replace(regexp, "");
        }
        return endResult;
      }
      if (type === "all") {
        return endResult.replace(/^[^\S\n]+/gm, "");
      }
      throw new Error("Unknown type: " + type);
    }
  };
};
var stripIndentTransformer_default = stripIndentTransformer;

// node_modules/common-tags/es/replaceResultTransformer/replaceResultTransformer.js
var replaceResultTransformer = function replaceResultTransformer2(replaceWhat, replaceWith) {
  return {
    onEndResult: function onEndResult(endResult) {
      if (replaceWhat == null || replaceWith == null) {
        throw new Error("replaceResultTransformer requires at least 2 arguments.");
      }
      return endResult.replace(replaceWhat, replaceWith);
    }
  };
};
var replaceResultTransformer_default = replaceResultTransformer;

// node_modules/common-tags/es/replaceSubstitutionTransformer/replaceSubstitutionTransformer.js
var replaceSubstitutionTransformer = function replaceSubstitutionTransformer2(replaceWhat, replaceWith) {
  return {
    onSubstitution: function onSubstitution(substitution, resultSoFar) {
      if (replaceWhat == null || replaceWith == null) {
        throw new Error("replaceSubstitutionTransformer requires at least 2 arguments.");
      }
      if (substitution == null) {
        return substitution;
      } else {
        return substitution.toString().replace(replaceWhat, replaceWith);
      }
    }
  };
};
var replaceSubstitutionTransformer_default = replaceSubstitutionTransformer;

// node_modules/common-tags/es/replaceStringTransformer/replaceStringTransformer.js
var replaceStringTransformer = function replaceStringTransformer2(replaceWhat, replaceWith) {
  return {
    onString: function onString(str) {
      if (replaceWhat == null || replaceWith == null) {
        throw new Error("replaceStringTransformer requires at least 2 arguments.");
      }
      return str.replace(replaceWhat, replaceWith);
    }
  };
};
var replaceStringTransformer_default = replaceStringTransformer;

// node_modules/common-tags/es/inlineArrayTransformer/inlineArrayTransformer.js
var defaults = {
  separator: "",
  conjunction: "",
  serial: false
};
var inlineArrayTransformer = function inlineArrayTransformer2() {
  var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaults;
  return {
    onSubstitution: function onSubstitution(substitution, resultSoFar) {
      if (Array.isArray(substitution)) {
        var arrayLength = substitution.length;
        var separator = opts.separator;
        var conjunction = opts.conjunction;
        var serial = opts.serial;
        var indent = resultSoFar.match(/(\n?[^\S\n]+)$/);
        if (indent) {
          substitution = substitution.join(separator + indent[1]);
        } else {
          substitution = substitution.join(separator + " ");
        }
        if (conjunction && arrayLength > 1) {
          var separatorIndex = substitution.lastIndexOf(separator);
          substitution = substitution.slice(0, separatorIndex) + (serial ? separator : "") + " " + conjunction + substitution.slice(separatorIndex + 1);
        }
      }
      return substitution;
    }
  };
};
var inlineArrayTransformer_default = inlineArrayTransformer;

// node_modules/common-tags/es/splitStringTransformer/splitStringTransformer.js
var splitStringTransformer = function splitStringTransformer2(splitBy) {
  return {
    onSubstitution: function onSubstitution(substitution, resultSoFar) {
      if (splitBy != null && typeof splitBy === "string") {
        if (typeof substitution === "string" && substitution.includes(splitBy)) {
          substitution = substitution.split(splitBy);
        }
      } else {
        throw new Error("You need to specify a string character to split by.");
      }
      return substitution;
    }
  };
};
var splitStringTransformer_default = splitStringTransformer;

// node_modules/common-tags/es/removeNonPrintingValuesTransformer/removeNonPrintingValuesTransformer.js
var isValidValue = function isValidValue2(x) {
  return x != null && !Number.isNaN(x) && typeof x !== "boolean";
};
var removeNonPrintingValuesTransformer = function removeNonPrintingValuesTransformer2() {
  return {
    onSubstitution: function onSubstitution(substitution) {
      if (Array.isArray(substitution)) {
        return substitution.filter(isValidValue);
      }
      if (isValidValue(substitution)) {
        return substitution;
      }
      return "";
    }
  };
};
var removeNonPrintingValuesTransformer_default = removeNonPrintingValuesTransformer;

// node_modules/common-tags/es/commaLists/commaLists.js
var commaLists = new TemplateTag_default(inlineArrayTransformer_default({ separator: "," }), stripIndentTransformer_default, trimResultTransformer_default);
var commaLists_default = commaLists;

// node_modules/common-tags/es/commaListsAnd/commaListsAnd.js
var commaListsAnd = new TemplateTag_default(inlineArrayTransformer_default({ separator: ",", conjunction: "and" }), stripIndentTransformer_default, trimResultTransformer_default);
var commaListsAnd_default = commaListsAnd;

// node_modules/common-tags/es/commaListsOr/commaListsOr.js
var commaListsOr = new TemplateTag_default(inlineArrayTransformer_default({ separator: ",", conjunction: "or" }), stripIndentTransformer_default, trimResultTransformer_default);
var commaListsOr_default = commaListsOr;

// node_modules/common-tags/es/html/html.js
var html = new TemplateTag_default(splitStringTransformer_default("\n"), removeNonPrintingValuesTransformer_default, inlineArrayTransformer_default, stripIndentTransformer_default, trimResultTransformer_default);
var html_default = html;

// node_modules/common-tags/es/safeHtml/safeHtml.js
var safeHtml = new TemplateTag_default(splitStringTransformer_default("\n"), inlineArrayTransformer_default, stripIndentTransformer_default, trimResultTransformer_default, replaceSubstitutionTransformer_default(/&/g, "&amp;"), replaceSubstitutionTransformer_default(/</g, "&lt;"), replaceSubstitutionTransformer_default(/>/g, "&gt;"), replaceSubstitutionTransformer_default(/"/g, "&quot;"), replaceSubstitutionTransformer_default(/'/g, "&#x27;"), replaceSubstitutionTransformer_default(/`/g, "&#x60;"));
var safeHtml_default = safeHtml;

// node_modules/common-tags/es/oneLine/oneLine.js
var oneLine = new TemplateTag_default(replaceResultTransformer_default(/(?:\n(?:\s*))+/g, " "), trimResultTransformer_default);
var oneLine_default = oneLine;

// node_modules/common-tags/es/oneLineTrim/oneLineTrim.js
var oneLineTrim = new TemplateTag_default(replaceResultTransformer_default(/(?:\n\s*)/g, ""), trimResultTransformer_default);
var oneLineTrim_default = oneLineTrim;

// node_modules/common-tags/es/oneLineCommaLists/oneLineCommaLists.js
var oneLineCommaLists = new TemplateTag_default(inlineArrayTransformer_default({ separator: "," }), replaceResultTransformer_default(/(?:\s+)/g, " "), trimResultTransformer_default);
var oneLineCommaLists_default = oneLineCommaLists;

// node_modules/common-tags/es/oneLineCommaListsOr/oneLineCommaListsOr.js
var oneLineCommaListsOr = new TemplateTag_default(inlineArrayTransformer_default({ separator: ",", conjunction: "or" }), replaceResultTransformer_default(/(?:\s+)/g, " "), trimResultTransformer_default);
var oneLineCommaListsOr_default = oneLineCommaListsOr;

// node_modules/common-tags/es/oneLineCommaListsAnd/oneLineCommaListsAnd.js
var oneLineCommaListsAnd = new TemplateTag_default(inlineArrayTransformer_default({ separator: ",", conjunction: "and" }), replaceResultTransformer_default(/(?:\s+)/g, " "), trimResultTransformer_default);
var oneLineCommaListsAnd_default = oneLineCommaListsAnd;

// node_modules/common-tags/es/inlineLists/inlineLists.js
var inlineLists = new TemplateTag_default(inlineArrayTransformer_default, stripIndentTransformer_default, trimResultTransformer_default);
var inlineLists_default = inlineLists;

// node_modules/common-tags/es/oneLineInlineLists/oneLineInlineLists.js
var oneLineInlineLists = new TemplateTag_default(inlineArrayTransformer_default, replaceResultTransformer_default(/(?:\s+)/g, " "), trimResultTransformer_default);
var oneLineInlineLists_default = oneLineInlineLists;

// node_modules/common-tags/es/stripIndent/stripIndent.js
var stripIndent = new TemplateTag_default(stripIndentTransformer_default, trimResultTransformer_default);
var stripIndent_default = stripIndent;

// node_modules/common-tags/es/stripIndents/stripIndents.js
var stripIndents = new TemplateTag_default(stripIndentTransformer_default("all"), trimResultTransformer_default);
var stripIndents_default = stripIndents;
export {
  TemplateTag_default as TemplateTag,
  html_default as codeBlock,
  commaLists_default as commaLists,
  commaListsAnd_default as commaListsAnd,
  commaListsOr_default as commaListsOr,
  html_default as html,
  inlineArrayTransformer_default as inlineArrayTransformer,
  inlineLists_default as inlineLists,
  oneLine_default as oneLine,
  oneLineCommaLists_default as oneLineCommaLists,
  oneLineCommaListsAnd_default as oneLineCommaListsAnd,
  oneLineCommaListsOr_default as oneLineCommaListsOr,
  oneLineInlineLists_default as oneLineInlineLists,
  oneLineTrim_default as oneLineTrim,
  removeNonPrintingValuesTransformer_default as removeNonPrintingValuesTransformer,
  replaceResultTransformer_default as replaceResultTransformer,
  replaceStringTransformer_default as replaceStringTransformer,
  replaceSubstitutionTransformer_default as replaceSubstitutionTransformer,
  safeHtml_default as safeHtml,
  html_default as source,
  splitStringTransformer_default as splitStringTransformer,
  stripIndent_default as stripIndent,
  stripIndentTransformer_default as stripIndentTransformer,
  stripIndents_default as stripIndents,
  trimResultTransformer_default as trimResultTransformer
};
//# sourceMappingURL=common-tags.js.map
