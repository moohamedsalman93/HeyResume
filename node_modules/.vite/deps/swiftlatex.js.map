{
  "version": 3,
  "sources": ["../../swiftlatex/dist/index.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    return createProxy(ep, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        ep.addEventListener(\"message\", function l(ev) {\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\n                return;\n            }\n            ep.removeEventListener(\"message\", l);\n            resolve(ev.data);\n        });\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nconst EngineStatus = {\n  Init: 1,\n  Ready: 2,\n  Busy: 3,\n  Error: 4\n};\n\nclass LaTeXEngine {\n  latexWorker = undefined;\n  latexWorkerProxy = undefined;\n  latexWorkerStatus = EngineStatus.Init;\n\n  constructor({extension, endpoint, workerPath}) {\n    this.extension = extension;\n    this.endpoint = endpoint;\n    this.workerPath = workerPath;\n  }\n\n  async loadEngine() {\n    if (this.latexWorker !== undefined) {\n      throw new Error('Other instance is running, abort()');\n    }\n\n    this.latexWorkerStatus = EngineStatus.Init;\n\n    this.latexWorker = new Worker(this.workerPath);\n    await new Promise((resolve) => {\n      this.latexWorker.onmessage = (event) => {\n        if (event.data === 'wasm_initialized') { resolve(); }\n      };\n    });\n\n    this.latexWorkerProxy = wrap(this.latexWorker);\n    await this.latexWorkerProxy.setExtension(this.extension);\n    await this.latexWorkerProxy.setTexliveEndpoint(this.endpoint);\n\n    this.latexWorkerStatus = EngineStatus.Ready;\n  }\n\n  isReady() {\n    return this.latexWorkerStatus === EngineStatus.Ready;\n  }\n\n  checkEngineStatus() {\n    if (!this.isReady()) {\n      throw Error('Engine is still spinning or not ready yet!');\n    }\n  }\n\n  async compileLaTeX() {\n    this.checkEngineStatus();\n    this.latexWorkerStatus = EngineStatus.Busy;\n\n    console.log('Engine compilation start');\n    const startTime = performance.now();\n    const {pdf, log, status} = await this.latexWorkerProxy.compileLaTeXRoutine();\n    this.latexWorkerStatus = EngineStatus.Ready;\n    console.log('Engine compilation finish ' + (performance.now() - startTime));\n\n    return { status, log, pdf: new Uint8Array(pdf) };\n  }\n\n  async compilePDF() {\n    this.checkEngineStatus();\n    this.latexWorkerStatus = EngineStatus.Busy;\n\n    console.log('Engine compilation start');\n    const startTime = performance.now();\n    const {pdf, log, status} = await this.latexWorkerProxy.compilePDFRoutine();\n    this.latexWorkerStatus = EngineStatus.Ready;\n    console.log('Engine compilation finish ' + (performance.now() - startTime));\n\n    return { status, log, pdf: new Uint8Array(pdf) };\n  }\n\n  // TODO: compileFormat\n\n  async setEngineMainFile(filename) {\n    this.checkEngineStatus();\n    if (this.latexWorker !== undefined) {\n      await this.latexWorkerProxy.setMainFile(filename);\n    }\n  }\n\n  async writeMemFSFile(filename, srccode) {\n    this.checkEngineStatus();\n    if (this.latexWorker !== undefined) {\n      await this.latexWorkerProxy.writeFileRoutine(filename, srccode);\n    }\n  }\n\n  async makeMemFSFolder(folder) {\n    this.checkEngineStatus();\n    if (this.latexWorker !== undefined) {\n      if (folder === '' || folder === '/') {\n        return;\n      }\n      await this.latexWorkerProxy.mkdirRoutine(folder);\n    }\n  }\n\n  async flushCache() {\n    this.checkEngineStatus();\n    if (this.latexWorker !== undefined) {\n      await this.latexWorkerProxy.flushCache();\n    }\n  }\n\n  async setTexliveEndpoint(url) {\n    if (this.latexWorker !== undefined) {\n      await this.latexWorkerProxy.setTexliveEndpoint(url);\n    }\n  }\n\n  closeWorker() {\n    if (this.latexWorker !== undefined) {\n      this.latexWorker.terminate();\n      this.latexWorkerProxy[releaseProxy]();\n      this.latexWorker = undefined;\n      this.latexWorkerProxy = undefined;\n    }\n  }\n}\n\nclass XeTeXEngine extends LaTeXEngine {\n  constructor() {\n    super({\n      extension: '.xdv',\n      endpoint: 'https://texlive2.swiftlatex.com/xetex/',\n      workerPath: 'swiftlatexxetex.js'\n    });\n  }\n}\n\nclass DvipdfmxEngine extends LaTeXEngine {\n  constructor() {\n    super({\n      extension: '.pdf',\n      endpoint: 'https://texlive2.swiftlatex.com/xetex/',\n      workerPath: 'swiftlatexdvipdfm.js'\n    });\n  }\n}\n\nclass PdfTeXEngine extends LaTeXEngine {\n  constructor() {\n    super({\n      extension: '.pdf',\n      endpoint: 'https://texlive2.swiftlatex.com/pdftex/',\n      workerPath: 'swiftlatexpdftex.js'\n    });\n  }\n}\n\nexport { DvipdfmxEngine, PdfTeXEngine, XeTeXEngine };\n"],
  "mappings": "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",
  "names": ["obj", "returnValue", "proxy"]
}
