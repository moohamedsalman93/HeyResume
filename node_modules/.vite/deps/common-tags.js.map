{
  "version": 3,
  "sources": ["../../common-tags/src/TemplateTag/TemplateTag.js", "../../common-tags/src/trimResultTransformer/trimResultTransformer.js", "../../common-tags/src/stripIndentTransformer/stripIndentTransformer.js", "../../common-tags/src/replaceResultTransformer/replaceResultTransformer.js", "../../common-tags/src/replaceSubstitutionTransformer/replaceSubstitutionTransformer.js", "../../common-tags/src/replaceStringTransformer/replaceStringTransformer.js", "../../common-tags/src/inlineArrayTransformer/inlineArrayTransformer.js", "../../common-tags/src/splitStringTransformer/splitStringTransformer.js", "../../common-tags/src/removeNonPrintingValuesTransformer/removeNonPrintingValuesTransformer.js", "../../common-tags/src/commaLists/commaLists.js", "../../common-tags/src/commaListsAnd/commaListsAnd.js", "../../common-tags/src/commaListsOr/commaListsOr.js", "../../common-tags/src/html/html.js", "../../common-tags/src/safeHtml/safeHtml.js", "../../common-tags/src/oneLine/oneLine.js", "../../common-tags/src/oneLineTrim/oneLineTrim.js", "../../common-tags/src/oneLineCommaLists/oneLineCommaLists.js", "../../common-tags/src/oneLineCommaListsOr/oneLineCommaListsOr.js", "../../common-tags/src/oneLineCommaListsAnd/oneLineCommaListsAnd.js", "../../common-tags/src/inlineLists/inlineLists.js", "../../common-tags/src/oneLineInlineLists/oneLineInlineLists.js", "../../common-tags/src/stripIndent/stripIndent.js", "../../common-tags/src/stripIndents/stripIndents.js"],
  "sourcesContent": ["/**\n * @class TemplateTag\n * @classdesc Consumes a pipeline of composable transformer plugins and produces a template tag.\n */\nexport default class TemplateTag {\n  /**\n   * constructs a template tag\n   * @constructs TemplateTag\n   * @param  {...Object} [...transformers] - an array or arguments list of transformers\n   * @return {Function}                    - a template tag\n   */\n  constructor(...transformers) {\n    // if first argument is an array, extrude it as a list of transformers\n    if (transformers.length > 0 && Array.isArray(transformers[0])) {\n      transformers = transformers[0];\n    }\n\n    // if any transformers are functions, this means they are not initiated - automatically initiate them\n    this.transformers = transformers.map(transformer => {\n      return typeof transformer === 'function' ? transformer() : transformer;\n    });\n\n    // return an ES2015 template tag\n    return this.tag;\n  }\n\n  /**\n   * Applies all transformers to a template literal tagged with this method.\n   * If a function is passed as the first argument, assumes the function is a template tag\n   * and applies it to the template, returning a template tag.\n   * @param  {(Function|String|Array<String>)} strings        - Either a template tag or an array containing template strings separated by identifier\n   * @param  {...*}                            ...expressions - Optional list of substitution values.\n   * @return {(String|Function)}                              - Either an intermediary tag function or the results of processing the template.\n   */\n  tag = (strings, ...expressions) => {\n    if (typeof strings === 'function') {\n      // if the first argument passed is a function, assume it is a template tag and return\n      // an intermediary tag that processes the template using the aforementioned tag, passing the\n      // result to our tag\n      return this.interimTag.bind(this, strings);\n    }\n\n    if (typeof strings === 'string') {\n      // if the first argument passed is a string, just transform it\n      return this.transformEndResult(strings);\n    }\n\n    // else, return a transformed end result of processing the template with our tag\n    strings = strings.map(this.transformString.bind(this));\n    return this.transformEndResult(\n      strings.reduce(this.processSubstitutions.bind(this, expressions)),\n    );\n  };\n\n  /**\n   * An intermediary template tag that receives a template tag and passes the result of calling the template with the received\n   * template tag to our own template tag.\n   * @param  {Function}        nextTag          - the received template tag\n   * @param  {Array<String>}   template         - the template to process\n   * @param  {...*}            ...substitutions - `substitutions` is an array of all substitutions in the template\n   * @return {*}                                - the final processed value\n   */\n  interimTag(previousTag, template, ...substitutions) {\n    return this.tag`${previousTag(template, ...substitutions)}`;\n  }\n\n  /**\n   * Performs bulk processing on the tagged template, transforming each substitution and then\n   * concatenating the resulting values into a string.\n   * @param  {Array<*>} substitutions - an array of all remaining substitutions present in this template\n   * @param  {String}   resultSoFar   - this iteration's result string so far\n   * @param  {String}   remainingPart - the template chunk after the current substitution\n   * @return {String}                 - the result of joining this iteration's processed substitution with the result\n   */\n  processSubstitutions(substitutions, resultSoFar, remainingPart) {\n    const substitution = this.transformSubstitution(\n      substitutions.shift(),\n      resultSoFar,\n    );\n    return ''.concat(resultSoFar, substitution, remainingPart);\n  }\n\n  /**\n   * Iterate through each transformer, applying the transformer's `onString` method to the template\n   * strings before all substitutions are processed.\n   * @param {String}  str - The input string\n   * @return {String}     - The final results of processing each transformer\n   */\n  transformString(str) {\n    const cb = (res, transform) =>\n      transform.onString ? transform.onString(res) : res;\n    return this.transformers.reduce(cb, str);\n  }\n\n  /**\n   * When a substitution is encountered, iterates through each transformer and applies the transformer's\n   * `onSubstitution` method to the substitution.\n   * @param  {*}      substitution - The current substitution\n   * @param  {String} resultSoFar  - The result up to and excluding this substitution.\n   * @return {*}                   - The final result of applying all substitution transformations.\n   */\n  transformSubstitution(substitution, resultSoFar) {\n    const cb = (res, transform) =>\n      transform.onSubstitution\n        ? transform.onSubstitution(res, resultSoFar)\n        : res;\n    return this.transformers.reduce(cb, substitution);\n  }\n\n  /**\n   * Iterates through each transformer, applying the transformer's `onEndResult` method to the\n   * template literal after all substitutions have finished processing.\n   * @param  {String} endResult - The processed template, just before it is returned from the tag\n   * @return {String}           - The final results of processing each transformer\n   */\n  transformEndResult(endResult) {\n    const cb = (res, transform) =>\n      transform.onEndResult ? transform.onEndResult(res) : res;\n    return this.transformers.reduce(cb, endResult);\n  }\n}\n", "/**\n * TemplateTag transformer that trims whitespace on the end result of a tagged template\n * @param  {String} side = '' - The side of the string to trim. Can be 'start' or 'end' (alternatively 'left' or 'right')\n * @return {Object}           - a TemplateTag transformer\n */\nconst trimResultTransformer = (side = '') => ({\n  onEndResult(endResult) {\n    if (side === '') {\n      return endResult.trim();\n    }\n\n    side = side.toLowerCase();\n\n    if (side === 'start' || side === 'left') {\n      return endResult.replace(/^\\s*/, '');\n    }\n\n    if (side === 'end' || side === 'right') {\n      return endResult.replace(/\\s*$/, '');\n    }\n\n    throw new Error(`Side not supported: ${side}`);\n  },\n});\n\nexport default trimResultTransformer;\n", "/**\n * strips indentation from a template literal\n * @param  {String} type = 'initial' - whether to remove all indentation or just leading indentation. can be 'all' or 'initial'\n * @return {Object}                  - a TemplateTag transformer\n */\nconst stripIndentTransformer = (type = 'initial') => ({\n  onEndResult(endResult) {\n    if (type === 'initial') {\n      // remove the shortest leading indentation from each line\n      const match = endResult.match(/^[^\\S\\n]*(?=\\S)/gm);\n      const indent = match && Math.min(...match.map(el => el.length));\n      if (indent) {\n        const regexp = new RegExp(`^.{${indent}}`, 'gm');\n        return endResult.replace(regexp, '');\n      }\n      return endResult;\n    }\n    if (type === 'all') {\n      // remove all indentation from each line\n      return endResult.replace(/^[^\\S\\n]+/gm, '');\n    }\n    throw new Error(`Unknown type: ${type}`);\n  },\n});\n\nexport default stripIndentTransformer;\n", "/**\n * Replaces tabs, newlines and spaces with the chosen value when they occur in sequences\n * @param  {(String|RegExp)} replaceWhat - the value or pattern that should be replaced\n * @param  {*}               replaceWith - the replacement value\n * @return {Object}                      - a TemplateTag transformer\n */\nconst replaceResultTransformer = (replaceWhat, replaceWith) => ({\n  onEndResult(endResult) {\n    if (replaceWhat == null || replaceWith == null) {\n      throw new Error(\n        'replaceResultTransformer requires at least 2 arguments.',\n      );\n    }\n    return endResult.replace(replaceWhat, replaceWith);\n  },\n});\n\nexport default replaceResultTransformer;\n", "const replaceSubstitutionTransformer = (replaceWhat, replaceWith) => ({\n  onSubstitution(substitution, resultSoFar) {\n    if (replaceWhat == null || replaceWith == null) {\n      throw new Error(\n        'replaceSubstitutionTransformer requires at least 2 arguments.',\n      );\n    }\n\n    // Do not touch if null or undefined\n    if (substitution == null) {\n      return substitution;\n    } else {\n      return substitution.toString().replace(replaceWhat, replaceWith);\n    }\n  },\n});\n\nexport default replaceSubstitutionTransformer;\n", "const replaceStringTransformer = (replaceWhat, replaceWith) => ({\n  onString(str) {\n    if (replaceWhat == null || replaceWith == null) {\n      throw new Error(\n        'replaceStringTransformer requires at least 2 arguments.',\n      );\n    }\n\n    return str.replace(replaceWhat, replaceWith);\n  },\n});\n\nexport default replaceStringTransformer;\n", "const defaults = {\n  separator: '',\n  conjunction: '',\n  serial: false,\n};\n\n/**\n * Converts an array substitution to a string containing a list\n * @param  {String} [opts.separator = ''] - the character that separates each item\n * @param  {String} [opts.conjunction = '']  - replace the last separator with this\n * @param  {Boolean} [opts.serial = false] - include the separator before the conjunction? (Oxford comma use-case)\n *\n * @return {Object}                     - a TemplateTag transformer\n */\nconst inlineArrayTransformer = (opts = defaults) => ({\n  onSubstitution(substitution, resultSoFar) {\n    // only operate on arrays\n    if (Array.isArray(substitution)) {\n      const arrayLength = substitution.length;\n      const separator = opts.separator;\n      const conjunction = opts.conjunction;\n      const serial = opts.serial;\n      // join each item in the array into a string where each item is separated by separator\n      // be sure to maintain indentation\n      const indent = resultSoFar.match(/(\\n?[^\\S\\n]+)$/);\n      if (indent) {\n        substitution = substitution.join(separator + indent[1]);\n      } else {\n        substitution = substitution.join(separator + ' ');\n      }\n      // if conjunction is set, replace the last separator with conjunction, but only if there is more than one substitution\n      if (conjunction && arrayLength > 1) {\n        const separatorIndex = substitution.lastIndexOf(separator);\n        substitution =\n          substitution.slice(0, separatorIndex) +\n          (serial ? separator : '') +\n          ' ' +\n          conjunction +\n          substitution.slice(separatorIndex + 1);\n      }\n    }\n    return substitution;\n  },\n});\n\nexport default inlineArrayTransformer;\n", "const splitStringTransformer = splitBy => ({\n  onSubstitution(substitution, resultSoFar) {\n    if (splitBy != null && typeof splitBy === 'string') {\n      if (typeof substitution === 'string' && substitution.includes(splitBy)) {\n        substitution = substitution.split(splitBy);\n      }\n    } else {\n      throw new Error('You need to specify a string character to split by.');\n    }\n    return substitution;\n  },\n});\n\nexport default splitStringTransformer;\n", "const isValidValue = x =>\n  x != null && !Number.isNaN(x) && typeof x !== 'boolean';\n\nconst removeNonPrintingValuesTransformer = () => ({\n  onSubstitution(substitution) {\n    if (Array.isArray(substitution)) {\n      return substitution.filter(isValidValue);\n    }\n    if (isValidValue(substitution)) {\n      return substitution;\n    }\n    return '';\n  },\n});\n\nexport default removeNonPrintingValuesTransformer;\n", "import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nconst commaLists = new TemplateTag(\n  inlineArrayTransformer({ separator: ',' }),\n  stripIndentTransformer,\n  trimResultTransformer,\n);\n\nexport default commaLists;\n", "import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nconst commaListsAnd = new TemplateTag(\n  inlineArrayTransformer({ separator: ',', conjunction: 'and' }),\n  stripIndentTransformer,\n  trimResultTransformer,\n);\n\nexport default commaListsAnd;\n", "import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nconst commaListsOr = new TemplateTag(\n  inlineArrayTransformer({ separator: ',', conjunction: 'or' }),\n  stripIndentTransformer,\n  trimResultTransformer,\n);\n\nexport default commaListsOr;\n", "import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport splitStringTransformer from '../splitStringTransformer';\nimport removeNonPrintingValuesTransformer from '../removeNonPrintingValuesTransformer';\n\nconst html = new TemplateTag(\n  splitStringTransformer('\\n'),\n  removeNonPrintingValuesTransformer,\n  inlineArrayTransformer,\n  stripIndentTransformer,\n  trimResultTransformer,\n);\n\nexport default html;\n", "import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport splitStringTransformer from '../splitStringTransformer';\nimport replaceSubstitutionTransformer from '../replaceSubstitutionTransformer';\n\nconst safeHtml = new TemplateTag(\n  splitStringTransformer('\\n'),\n  inlineArrayTransformer,\n  stripIndentTransformer,\n  trimResultTransformer,\n  replaceSubstitutionTransformer(/&/g, '&amp;'),\n  replaceSubstitutionTransformer(/</g, '&lt;'),\n  replaceSubstitutionTransformer(/>/g, '&gt;'),\n  replaceSubstitutionTransformer(/\"/g, '&quot;'),\n  replaceSubstitutionTransformer(/'/g, '&#x27;'),\n  replaceSubstitutionTransformer(/`/g, '&#x60;'),\n);\n\nexport default safeHtml;\n", "import TemplateTag from '../TemplateTag';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nconst oneLine = new TemplateTag(\n  replaceResultTransformer(/(?:\\n(?:\\s*))+/g, ' '),\n  trimResultTransformer,\n);\n\nexport default oneLine;\n", "import TemplateTag from '../TemplateTag';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nconst oneLineTrim = new TemplateTag(\n  replaceResultTransformer(/(?:\\n\\s*)/g, ''),\n  trimResultTransformer,\n);\n\nexport default oneLineTrim;\n", "import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nconst oneLineCommaLists = new TemplateTag(\n  inlineArrayTransformer({ separator: ',' }),\n  replaceResultTransformer(/(?:\\s+)/g, ' '),\n  trimResultTransformer,\n);\n\nexport default oneLineCommaLists;\n", "import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nconst oneLineCommaListsOr = new TemplateTag(\n  inlineArrayTransformer({ separator: ',', conjunction: 'or' }),\n  replaceResultTransformer(/(?:\\s+)/g, ' '),\n  trimResultTransformer,\n);\n\nexport default oneLineCommaListsOr;\n", "import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nconst oneLineCommaListsAnd = new TemplateTag(\n  inlineArrayTransformer({ separator: ',', conjunction: 'and' }),\n  replaceResultTransformer(/(?:\\s+)/g, ' '),\n  trimResultTransformer,\n);\n\nexport default oneLineCommaListsAnd;\n", "import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nconst inlineLists = new TemplateTag(\n  inlineArrayTransformer,\n  stripIndentTransformer,\n  trimResultTransformer,\n);\n\nexport default inlineLists;\n", "import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nconst oneLineInlineLists = new TemplateTag(\n  inlineArrayTransformer,\n  replaceResultTransformer(/(?:\\s+)/g, ' '),\n  trimResultTransformer,\n);\n\nexport default oneLineInlineLists;\n", "import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nconst stripIndent = new TemplateTag(\n  stripIndentTransformer,\n  trimResultTransformer,\n);\n\nexport default stripIndent;\n", "import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nconst stripIndents = new TemplateTag(\n  stripIndentTransformer('all'),\n  trimResultTransformer,\n);\n\nexport default stripIndents;\n"],
  "mappings": "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",
  "names": ["TemplateTag", "transformers", "tag", "strings", "expressions", "interimTag", "bind", "transformEndResult", "map", "transformString", "reduce", "processSubstitutions", "length", "Array", "isArray", "transformer", "previousTag", "template", "substitutions", "resultSoFar", "remainingPart", "substitution", "transformSubstitution", "shift", "concat", "str", "cb", "res", "transform", "onString", "onSubstitution", "endResult", "onEndResult", "trimResultTransformer", "side", "onEndResult", "endResult", "trim", "toLowerCase", "replace", "Error", "stripIndentTransformer", "type", "onEndResult", "endResult", "match", "indent", "Math", "min", "map", "el", "length", "regexp", "RegExp", "replace", "Error", "replaceResultTransformer", "replaceWhat", "replaceWith", "onEndResult", "endResult", "Error", "replace", "replaceSubstitutionTransformer", "replaceWhat", "replaceWith", "onSubstitution", "substitution", "resultSoFar", "Error", "toString", "replace", "replaceStringTransformer", "replaceWhat", "replaceWith", "onString", "str", "Error", "replace", "defaults", "separator", "conjunction", "serial", "inlineArrayTransformer", "opts", "onSubstitution", "substitution", "resultSoFar", "Array", "isArray", "arrayLength", "length", "indent", "match", "join", "separatorIndex", "lastIndexOf", "slice", "splitStringTransformer", "onSubstitution", "substitution", "resultSoFar", "splitBy", "includes", "split", "Error", "isValidValue", "x", "Number", "isNaN", "removeNonPrintingValuesTransformer", "onSubstitution", "substitution", "Array", "isArray", "filter", "commaLists", "TemplateTag", "inlineArrayTransformer", "separator", "stripIndentTransformer", "trimResultTransformer", "commaListsAnd", "TemplateTag", "inlineArrayTransformer", "separator", "conjunction", "stripIndentTransformer", "trimResultTransformer", "commaListsOr", "TemplateTag", "inlineArrayTransformer", "separator", "conjunction", "stripIndentTransformer", "trimResultTransformer", "html", "TemplateTag", "splitStringTransformer", "removeNonPrintingValuesTransformer", "inlineArrayTransformer", "stripIndentTransformer", "trimResultTransformer", "safeHtml", "TemplateTag", "splitStringTransformer", "inlineArrayTransformer", "stripIndentTransformer", "trimResultTransformer", "replaceSubstitutionTransformer", "oneLine", "TemplateTag", "replaceResultTransformer", "trimResultTransformer", "oneLineTrim", "TemplateTag", "replaceResultTransformer", "trimResultTransformer", "oneLineCommaLists", "TemplateTag", "inlineArrayTransformer", "separator", "replaceResultTransformer", "trimResultTransformer", "oneLineCommaListsOr", "TemplateTag", "inlineArrayTransformer", "separator", "conjunction", "replaceResultTransformer", "trimResultTransformer", "oneLineCommaListsAnd", "TemplateTag", "inlineArrayTransformer", "separator", "conjunction", "replaceResultTransformer", "trimResultTransformer", "inlineLists", "TemplateTag", "inlineArrayTransformer", "stripIndentTransformer", "trimResultTransformer", "oneLineInlineLists", "TemplateTag", "inlineArrayTransformer", "replaceResultTransformer", "trimResultTransformer", "stripIndent", "TemplateTag", "stripIndentTransformer", "trimResultTransformer", "stripIndents", "TemplateTag", "stripIndentTransformer", "trimResultTransformer"]
}
